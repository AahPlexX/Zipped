## 6. Course Management Implementation (Continued)

### 6.3 Lesson Content API Endpoint (Continued)

**File: `src/app/api/lessons/[lessonId]/route.ts`** (continued)
```typescript
        course: {
          select: {
            id: true,
            title: true,
            courseAcronym: true,
            enrollments: {
              where: {
                userId: session.user.id,
              },
              select: {
                id: true,
                lessonProgress: {
                  where: {
                    lessonId,
                  },
                  select: {
                    id: true,
                    completedAt: true,
                  }
                }
              }
            }
          }
        }
      }
    });
    
    if (!lesson) {
      return NextResponse.json(
        { error: "Lesson not found" },
        { status: 404 }
      );
    }
    
    // Check if user is enrolled in the course
    const enrollment = lesson.course.enrollments[0];
    if (!enrollment) {
      return NextResponse.json(
        { error: "Not enrolled in this course" },
        { status: 403 }
      );
    }
    
    // Check if lesson is already marked as completed
    const progress = enrollment.lessonProgress[0];
    
    // Format lesson data for client
    const formattedLesson = {
      id: lesson.id,
      title: lesson.title,
      overview: lesson.overview,
      content: lesson.content,
      keywords: lesson.keywords,
      moduleTitle: lesson.module.title,
      moduleNumber: lesson.module.moduleNumber,
      courseId: lesson.course.id,
      courseTitle: lesson.course.title,
      courseAcronym: lesson.course.courseAcronym,
      enrollmentId: enrollment.id,
      isCompleted: !!progress,
      completedAt: progress?.completedAt || null,
    };
    
    return NextResponse.json(formattedLesson);
  } catch (error) {
    console.error("Error fetching lesson:", error);
    return NextResponse.json(
      { error: "Failed to fetch lesson" },
      { status: 500 }
    );
  }
}
```

### 6.4 Mark Lesson Complete Endpoint

**File: `src/app/api/progress/complete/route.ts`**
```typescript
import { NextRequest, NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import { auth } from "@/lib/auth";
import { z } from "zod";

// Validation schema for request body
const markCompleteSchema = z.object({
  lessonId: z.string().trim().min(1, "Lesson ID is required"),
  enrollmentId: z.string().trim().min(1, "Enrollment ID is required"),
});

export async function POST(req: NextRequest) {
  try {
    // Check if user is authenticated
    const session = await auth.getSession();
    if (!session?.user) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }
    
    // Parse and validate request body
    const body = await req.json();
    const validationResult = markCompleteSchema.safeParse(body);
    
    if (!validationResult.success) {
      return NextResponse.json(
        { error: "Invalid request data", details: validationResult.error.format() },
        { status: 400 }
      );
    }
    
    const { lessonId, enrollmentId } = validationResult.data;
    
    // Verify enrollment belongs to the authenticated user
    const enrollment = await prisma.enrollment.findUnique({
      where: {
        id: enrollmentId,
        userId: session.user.id,
      },
    });
    
    if (!enrollment) {
      return NextResponse.json(
        { error: "Enrollment not found or unauthorized" },
        { status: 403 }
      );
    }
    
    // Verify lesson belongs to the enrolled course
    const lesson = await prisma.lesson.findUnique({
      where: {
        id: lessonId,
        courseId: enrollment.courseId,
      },
    });
    
    if (!lesson) {
      return NextResponse.json(
        { error: "Lesson not found or not part of the enrolled course" },
        { status: 404 }
      );
    }
    
    // Check if progress already exists
    const existingProgress = await prisma.lessonProgress.findUnique({
      where: {
        enrollmentId_lessonId: {
          enrollmentId,
          lessonId,
        },
      },
    });
    
    if (existingProgress) {
      return NextResponse.json(
        { 
          message: "Lesson already marked as complete",
          completedAt: existingProgress.completedAt,
        },
        { status: 200 }
      );
    }
    
    // Create lesson progress record
    const progress = await prisma.lessonProgress.create({
      data: {
        enrollmentId,
        lessonId,
        completedAt: new Date(),
      },
    });
    
    // Check if all lessons are completed to potentially update enrollment status
    const totalLessonCount = await prisma.lesson.count({
      where: {
        courseId: enrollment.courseId,
      },
    });
    
    const completedLessonCount = await prisma.lessonProgress.count({
      where: {
        enrollmentId,
      },
    });
    
    return NextResponse.json({
      message: "Lesson marked as complete",
      progress: {
        id: progress.id,
        completedAt: progress.completedAt,
        completedCount: completedLessonCount,
        totalCount: totalLessonCount,
        percentage: Math.floor((completedLessonCount / totalLessonCount) * 100),
        allCompleted: completedLessonCount === totalLessonCount,
      },
    });
  } catch (error) {
    console.error("Error marking lesson as complete:", error);
    return NextResponse.json(
      { error: "Failed to mark lesson as complete" },
      { status: 500 }
    );
  }
}
```

### 6.5 Course Progress Endpoint

**File: `src/app/api/progress/[enrollmentId]/route.ts`**
```typescript
import { NextRequest, NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import { auth } from "@/lib/auth";

interface Params {
  params: {
    enrollmentId: string
  }
}

export async function GET(req: NextRequest, { params }: Params) {
  try {
    const { enrollmentId } = params;
    
    // Check if user is authenticated
    const session = await auth.getSession();
    if (!session?.user) {
      return NextResponse.json(
        { error: "Authentication required" },
        { status: 401 }
      );
    }
    
    // Get enrollment and verify ownership
    const enrollment = await prisma.enrollment.findUnique({
      where: {
        id: enrollmentId,
        userId: session.user.id,
      },
      include: {
        course: {
          select: {
            lessonCount: true,
          },
        },
        lessonProgress: {
          select: {
            id: true,
            lessonId: true,
            completedAt: true,
          },
        },
      },
    });
    
    if (!enrollment) {
      return NextResponse.json(
        { error: "Enrollment not found or unauthorized" },
        { status: 404 }
      );
    }
    
    // Calculate progress statistics
    const totalLessons = enrollment.course.lessonCount;
    const completedLessons = enrollment.lessonProgress.length;
    const percentage = Math.floor((completedLessons / totalLessons) * 100);
    const completedLessonIds = enrollment.lessonProgress.map(progress => progress.lessonId);
    
    return NextResponse.json({
      enrollmentId,
      completedLessons,
      totalLessons,
      percentage,
      completedLessonIds,
      allCompleted: completedLessons === totalLessons,
    });
  } catch (error) {
    console.error("Error fetching course progress:", error);
    return NextResponse.json(
      { error: "Failed to fetch course progress" },
      { status: 500 }
    );
  }
}
```

### 6.6 Dashboard Page

**File: `src/app/(main)/dashboard/page.tsx`**
```typescript
import { auth } from "@/lib/auth";
import prisma from "@/lib/prisma";
import { format } from "date-fns";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { ExternalLink, ChevronRight } from "lucide-react";
import PageHeader from "@/components/core/PageHeader";
import EmptyState from "@/components/core/EmptyState";

export const metadata = {
  title: 'Dashboard',
  description: 'Manage your enrolled courses and track your learning progress',
};

export default async function DashboardPage() {
  // Get authenticated user
  const session = await auth.getSession();
  if (!session?.user) {
    return null; // Should be handled by layout or middleware
  }
  
  // Get user enrollments with progress info
  const enrollments = await prisma.enrollment.findMany({
    where: {
      userId: session.user.id,
    },
    include: {
      course: {
        select: {
          id: true,
          title: true,
          courseAcronym: true,
          lessonCount: true,
          description: true,
        },
      },
      lessonProgress: {
        select: {
          id: true,
        },
      },
      certificate: {
        select: {
          id: true,
          issuedAt: true,
        }
      },
    },
    orderBy: {
      enrolledAt: 'desc',
    },
  });
  
  return (
    <div className="container py-8">
      <PageHeader
        title="Dashboard"
        description="Track your progress and continue your learning journey"
      />
      
      {enrollments.length === 0 ? (
        <EmptyState
          title="No courses enrolled yet"
          description="Explore our course catalog to start your learning journey"
          action={
            <Link href="/courses">
              <Button>Browse Courses</Button>
            </Link>
          }
        />
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
          {enrollments.map((enrollment) => {
            const completedLessons = enrollment.lessonProgress.length;
            const totalLessons = enrollment.course.lessonCount;
            const progressPercentage = Math.floor((completedLessons / totalLessons) * 100);
            const isCompleted = enrollment.certificate !== null;
            
            return (
              <Card key={enrollment.id} className={isCompleted ? "border-green-500" : ""}>
                <CardHeader>
                  <CardTitle>{enrollment.course.title}</CardTitle>
                  <CardDescription>
                    Enrolled on {format(new Date(enrollment.enrolledAt), 'MMM d, yyyy')}
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <div className="flex justify-between text-sm">
                      <span>Progress</span>
                      <span>{completedLessons} / {totalLessons} lessons</span>
                    </div>
                    <Progress value={progressPercentage} className="h-2" />
                  </div>
                  
                  {isCompleted && (
                    <div className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-800/20 dark:text-green-400">
                      Completed
                    </div>
                  )}
                </CardContent>
                
                <CardFooter className="flex justify-between items-center">
                  <Link href={`/courses/${enrollment.course.id}/view`}>
                    <Button variant={isCompleted ? "outline" : "default"}>
                      {isCompleted ? "Review Course" : "Continue Learning"}
                      <ChevronRight className="ml-1 h-4 w-4" />
                    </Button>
                  </Link>
                  
                  {isCompleted && (
                    <Link href={`/api/certificate/${enrollment.course.id}`} target="_blank">
                      <Button variant="ghost" size="sm">
                        Certificate
                        <ExternalLink className="ml-1 h-3 w-3" />
                      </Button>
                    </Link>
                  )}
                </CardFooter>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}
```

### 6.7 Course List Page

**File: `src/app/(main)/courses/page.tsx`**
```typescript
import { auth } from "@/lib/auth";
import prisma from "@/lib/prisma";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { CheckCircle2, ArrowRight } from "lucide-react";
import PageHeader from "@/components/core/PageHeader";

export const metadata = {
  title: 'Courses',
  description: 'Explore our comprehensive range of business courses',
};

export default async function CoursesPage() {
  // Get authenticated user
  const session = await auth.getSession();
  if (!session?.user) {
    return null; // Should be handled by layout or middleware
  }
  
  // Get all courses with enrollment status for this user
  const courses = await prisma.course.findMany({
    select: {
      id: true,
      title: true,
      description: true,
      price: true,
      courseAcronym: true,
      moduleCount: true,
      lessonCount: true,
      enrollments: {
        where: {
          userId: session.user.id,
        },
        select: {
          id: true,
          certificate: {
            select: {
              id: true,
            }
          }
        }
      }
    },
    orderBy: {
      title: 'asc',
    },
  });
  
  return (
    <div className="container py-8">
      <PageHeader
        title="Course Catalog"
        description="Explore our comprehensive range of business courses"
      />
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mt-8">
        {courses.map((course) => {
          const isEnrolled = course.enrollments.length > 0;
          const isCertified = isEnrolled && course.enrollments[0].certificate !== null;
          const enrollmentId = isEnrolled ? course.enrollments[0].id : null;
          
          return (
            <Card key={course.id} className="flex flex-col">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle>{course.title}</CardTitle>
                  {isCertified && (
                    <span className="inline-flex rounded-full bg-green-100 p-1 text-green-600 dark:bg-green-800/20 dark:text-green-400">
                      <CheckCircle2 className="h-4 w-4" />
                    </span>
                  )}
                </div>
                <CardDescription>{course.courseAcronym}</CardDescription>
              </CardHeader>
              
              <CardContent className="flex-grow">
                <p className="text-sm text-muted-foreground mb-4">
                  {course.description.length > 180 
                    ? `${course.description.substring(0, 180)}...` 
                    : course.description}
                </p>
                
                <div className="flex items-center justify-between text-sm text-muted-foreground">
                  <span>{course.moduleCount} Modules</span>
                  <span>{course.lessonCount} Lessons</span>
                </div>
              </CardContent>
              
              <CardFooter className="flex justify-between items-center border-t pt-4">
                {!isEnrolled ? (
                  <>
                    <div className="font-bold text-lg">
                      ${(course.price / 100).toFixed(2)}
                    </div>
                    <Link href={`/purchase/${course.id}`}>
                      <Button>
                        Purchase
                        <ArrowRight className="ml-1 h-4 w-4" />
                      </Button>
                    </Link>
                  </>
                ) : (
                  <>
                    <div className="text-sm text-muted-foreground">
                      {isCertified ? 'Certified' : 'Enrolled'}
                    </div>
                    <Link href={`/courses/${course.id}/view`}>
                      <Button variant="outline">
                        {isCertified ? 'Review' : 'Continue'}
                        <ArrowRight className="ml-1 h-4 w-4" />
                      </Button>
                    </Link>
                  </>
                )}
              </CardFooter>
            </Card>
          );
        })}
      </div>
    </div>
  );
}
```

### 6.8 Course Sidebar Component

**File: `src/components/features/courses/CourseSidebar.tsx`**
```typescript
import { FC, useState, useEffect } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { ChevronDown, ChevronRight, CheckCircle2, Circle } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Button } from '@/components/ui/button';
import { useCourseProgress } from '@/hooks/useCourseProgress';
import { Skeleton } from '@/components/ui/skeleton';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';

type Lesson = {
  id: string;
  title: string;
  lessonNumber: number;
  isCompleted: boolean;
};

type Module = {
  id: string;
  title: string;
  moduleNumber: number;
  lessons: Lesson[];
};

interface CourseSidebarProps {
  courseId: string;
  enrollmentId: string;
  modules: Module[];
  isMobileOpen?: boolean;
  onMobileClose?: () => void;
}

export const CourseSidebar: FC<CourseSidebarProps> = ({
  courseId,
  enrollmentId,
  modules,
  isMobileOpen = false,
  onMobileClose,
}) => {
  const pathname = usePathname();
  const { completedLessonIds, isLoading: progressLoading } = useCourseProgress(enrollmentId);
  
  // Keep track of which modules are expanded
  const [expandedModules, setExpandedModules] = useState<Record<string, boolean>>({});
  
  // Initialize expanded state based on current URL
  useEffect(() => {
    if (modules && pathname) {
      const currentModuleId = findCurrentModuleId();
      if (currentModuleId) {
        setExpandedModules(prev => ({
          ...prev,
          [currentModuleId]: true
        }));
      }
    }
  }, [modules, pathname]);

  // Find the module ID that contains the currently active lesson
  const findCurrentModuleId = (): string | null => {
    const currentLessonId = pathname.split('/').pop();
    
    for (const module of modules) {
      for (const lesson of module.lessons) {
        if (lesson.id === currentLessonId) {
          return module.id;
        }
      }
    }
    
    return null;
  };

  // Toggle a module's expanded state
  const toggleModule = (moduleId: string) => {
    setExpandedModules(prev => ({
      ...prev,
      [moduleId]: !prev[moduleId]
    }));
  };

  // Check if a lesson is completed
  const isLessonCompleted = (lessonId: string): boolean => {
    return completedLessonIds?.includes(lessonId) || false;
  };

  // Check if a lesson is the currently active one
  const isActiveLesson = (lessonId: string): boolean => {
    return pathname.endsWith(`/lesson/${lessonId}`);
  };

  // Calculate module completion percentage
  const getModuleCompletionPercentage = (moduleId: string): number => {
    const module = modules.find(m => m.id === moduleId);
    if (!module || !completedLessonIds) return 0;
    
    const completedCount = module.lessons.filter(lesson => 
      completedLessonIds.includes(lesson.id)
    ).length;
    
    return Math.round((completedCount / module.lessons.length) * 100);
  };

  return (
    <div 
      className={cn(
        "flex flex-col w-full h-full bg-slate-950 border-r border-slate-800 transition-transform",
        "md:w-72 md:min-w-72 md:max-w-72 md:static md:transform-none",
        isMobileOpen ? "absolute inset-y-0 left-0 z-50 transform translate-x-0" : "absolute -translate-x-full"
      )}
    >
      <div className="p-4 flex justify-between items-center border-b border-slate-800">
        <h2 className="text-xl font-semibold text-slate-100">Course Content</h2>
        {isMobileOpen && onMobileClose && (
          <Button 
            variant="outline" 
            size="sm" 
            onClick={onMobileClose}
            className="md:hidden"
            aria-label="Close sidebar"
          >
            &times;
          </Button>
        )}
      </div>
      
      <ScrollArea className="flex-1 pt-2">
        {progressLoading ? (
          <div className="space-y-6 px-4 py-2">
            {Array.from({ length: 3 }).map((_, i) => (
              <div key={i} className="space-y-3">
                <Skeleton className="h-8 w-full" />
                <div className="pl-4 space-y-2">
                  {Array.from({ length: 3 }).map((_, j) => (
                    <Skeleton key={j} className="h-7 w-full" />
                  ))}
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="px-1">
            {modules.map((module) => (
              <Collapsible
                key={module.id}
                open={expandedModules[module.id]}
                onOpenChange={() => toggleModule(module.id)}
                className="mb-2"
              >
                <div className="px-3 py-2">
                  <CollapsibleTrigger asChild>
                    <Button
                      variant="ghost"
                      className="w-full justify-between hover:bg-slate-800 rounded-md h-auto py-2"
                    >
                      <div className="flex items-center text-left">
                        {expandedModules[module.id] ? (
                          <ChevronDown className="h-4 w-4 mr-2 text-slate-400" />
                        ) : (
                          <ChevronRight className="h-4 w-4 mr-2 text-slate-400" />
                        )}
                        <span className="font-medium truncate">{module.title}</span>
                      </div>
                      <span className="text-xs text-slate-400">
                        {getModuleCompletionPercentage(module.id)}%
                      </span>
                    </Button>
                  </CollapsibleTrigger>
                </div>
                
                <CollapsibleContent>
                  <ul className="pl-9 pr-2 pb-2 space-y-1">
                    {module.lessons.map((lesson) => {
                      const completed = isLessonCompleted(lesson.id) || lesson.isCompleted;
                      const active = isActiveLesson(lesson.id);
                      
                      return (
                        <li key={lesson.id}>
                          <Link
                            href={`/courses/${courseId}/view/lesson/${lesson.id}`}
                            className={cn(
                              "flex items-center py-2 px-3 rounded-md text-sm text-slate-300 hover:text-white hover:bg-slate-800",
                              active && "bg-slate-800 text-white font-medium"
                            )}
                            onClick={isMobileOpen && onMobileClose ? onMobileClose : undefined}
                          >
                            {completed ? (
                              <CheckCircle2 className="h-4 w-4 mr-2 text-emerald-500 flex-shrink-0" />
                            ) : (
                              <Circle className="h-4 w-4 mr-2 text-slate-500 flex-shrink-0" />
                            )}
                            <span className="truncate">{lesson.title}</span>
                          </Link>
                        </li>
                      );
                    })}
                  </ul>
                </CollapsibleContent>
                
                <Separator className="bg-slate-800 last:hidden" />
              </Collapsible>
            ))}
            
            <div className="px-4 py-3">
              <Link 
                href={`/courses/${courseId}/view/exam`}
                className={cn(
                  "flex items-center py-2 px-3 rounded-md font-medium",
                  "bg-slate-800/50 hover:bg-slate-800 text-white hover:text-white",
                  pathname.endsWith('/exam') && "bg-slate-700"
                )}
                onClick={isMobileOpen && onMobileClose ? onMobileClose : undefined}
              >
                Final Exam
              </Link>
            </div>
          </div>
        )}
      </ScrollArea>
    </div>
  );
};

export default CourseSidebar;
```

### 6.9 Course Progress Hook

**File: `src/hooks/useCourseProgress.ts`**
```typescript
import { useQuery } from '@tanstack/react-query';
import { useState, useEffect } from 'react';

interface CourseProgress {
  enrollmentId: string;
  completedLessons: number;
  totalLessons: number;
  percentage: number;
  completedLessonIds: string[];
  allCompleted: boolean;
}

export function useCourseProgress(enrollmentId: string) {
  const [completedLessonIds, setCompletedLessonIds] = useState<string[]>([]);

  const { data, isLoading, error, refetch } = useQuery<CourseProgress>({
    queryKey: ['courseProgress', enrollmentId],
    queryFn: async () => {
      const response = await fetch(`/api/progress/${enrollmentId}`);
      if (!response.ok) {
        throw new Error('Failed to fetch course progress');
      }
      return response.json();
    },
    enabled: !!enrollmentId,
    refetchOnWindowFocus: false,
  });

  useEffect(() => {
    if (data?.completedLessonIds) {
      setCompletedLessonIds(data.completedLessonIds);
    }
  }, [data]);

  // Function to mark a lesson as complete
  const markLessonComplete = async (lessonId: string) => {
    try {
      const response = await fetch('/api/progress/complete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          lessonId,
          enrollmentId,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to mark lesson as complete');
      }

      const result = await response.json();
      
      // Update local state immediately for better UX
      if (!completedLessonIds.includes(lessonId)) {
        setCompletedLessonIds(prev => [...prev, lessonId]);
      }
      
      // Refetch to ensure data consistency
      refetch();
      
      return result;
    } catch (error) {
      console.error('Error marking lesson as complete:', error);
      throw error;
    }
  };

  return {
    progress: data,
    completedLessonIds,
    completedLessons: data?.completedLessons || 0,
    totalLessons: data?.totalLessons || 0,
    percentage: data?.percentage || 0,
    allCompleted: data?.allCompleted || false,
    isLoading,
    error,
    markLessonComplete,
    refetch,
  };
}
```

### 6.10 Course View Layout

**File: `src/app/(main)/courses/[courseId]/view/layout.tsx`**
```typescript
import { auth } from "@/lib/auth";
import prisma from "@/lib/prisma";
import { redirect } from "next/navigation";
import { Suspense } from "react";
import CourseSidebar from "@/components/features/courses/CourseSidebar";
import MobileSidebarToggle from "@/components/features/courses/MobileSidebarToggle";
import CourseHeader from "@/components/features/courses/CourseHeader";

interface CourseViewLayoutProps {
  children: React.ReactNode;
  params: {
    courseId: string;
  };
}

export default async function CourseViewLayout({ children, params }: CourseViewLayoutProps) {
  const { courseId } = params;
  
  // Check if the user is authenticated
  const session = await auth.getSession();
  if (!session?.user) {
    redirect("/login");
  }
  
  // Check if the user is enrolled in this course
  const enrollment = await prisma.enrollment.findFirst({
    where: {
      courseId,
      userId: session.user.id,
    },
    include: {
      course: {
        include: {
          modules: {
            orderBy: {
              moduleNumber: 'asc',
            },
            include: {
              lessons: {
                orderBy: {
                  lessonNumber: 'asc',
                },
                select: {
                  id: true,
                  title: true,
                  lessonNumber: true,
                },
              },
            },
          },
        },
      },
      lessonProgress: {
        select: {
          lessonId: true,
        },
      },
    },
  });
  
  // If not enrolled, redirect to courses page
  if (!enrollment) {
    redirect("/courses");
  }
  
  // Format course data for sidebar
  const completedLessonIds = enrollment.lessonProgress.map(progress => progress.lessonId);
  
  const modules = enrollment.course.modules.map(module => ({
    id: module.id,
    title: module.title,
    moduleNumber: module.moduleNumber,
    lessons: module.lessons.map(lesson => ({
      id: lesson.id,
      title: lesson.title,
      lessonNumber: lesson.lessonNumber,
      isCompleted: completedLessonIds.includes(lesson.id),
    })),
  }));
  
  return (
    <div className="flex flex-col h-screen">
      <CourseHeader 
        courseTitle={enrollment.course.title} 
        courseAcronym={enrollment.course.courseAcronym}
        completedLessons={enrollment.lessonProgress.length}
        totalLessons={enrollment.course.modules.reduce((sum, module) => sum + module.lessons.length, 0)}
      />
      
      <div className="flex flex-1 overflow-hidden">
        <Suspense fallback={<div>Loading sidebar...</div>}>
          <CourseSidebar
            courseId={courseId}
            enrollmentId={enrollment.id}
            modules={modules}
          />
        </Suspense>
        
        <div className="flex-1 overflow-auto relative">
          <MobileSidebarToggle />
          <main className="p-6">
            {children}
          </main>
        </div>
      </div>
    </div>
  );
}
```

### 6.11 Mobile Sidebar Toggle Component

**File: `src/components/features/courses/MobileSidebarToggle.tsx`**
```typescript
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Menu } from 'lucide-react';
import CourseSidebar from './CourseSidebar';
import { useParams } from 'next/navigation';
import { useCourseProgress } from '@/hooks/useCourseProgress';

export default function MobileSidebarToggle() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const params = useParams();
  const courseId = params.courseId as string;
  const enrollmentId = params.enrollmentId as string;
  
  // Get params from the URL if not provided
  const { data: courseData } = useCourseProgress(enrollmentId);
  
  if (!courseId || !enrollmentId || !courseData) {
    return null;
  }
  
  return (
    <>
      <Button
        variant="outline"
        size="icon"
        className="md:hidden fixed top-4 left-4 z-40"
        onClick={() => setIsSidebarOpen(true)}
      >
        <Menu className="h-4 w-4" />
        <span className="sr-only">Open sidebar</span>
      </Button>
      
      {isSidebarOpen && (
        <>
          <div 
            className="fixed inset-0 bg-black/50 z-40 md:hidden"
            onClick={() => setIsSidebarOpen(false)}
          />
          <CourseSidebar
            courseId={courseId}
            enrollmentId={enrollmentId}
            modules={courseData.modules || []}
            isMobileOpen={true}
            onMobileClose={() => setIsSidebarOpen(false)}
          />
        </>
      )}
    </>
  );
}
```

### 6.12 Course Header Component

**File: `src/components/features/courses/CourseHeader.tsx`**
```typescript
import { Progress } from "@/components/ui/progress";
import Link from "next/link";
import { ChevronLeft } from "lucide-react";

interface CourseHeaderProps {
  courseTitle: string;
  courseAcronym: string;
  completedLessons: number;
  totalLessons: number;
}

export default function CourseHeader({
  courseTitle,
  courseAcronym,
  completedLessons,
  totalLessons,
}: CourseHeaderProps) {
  const progressPercentage = Math.round((completedLessons / totalLessons) * 100) || 0;
  
  return (
    <div className="bg-white dark:bg-slate-950 border-b">
      <div className="container py-4 px-4">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div className="flex items-center">
            <Link
              href="/dashboard"
              className="mr-4 text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-100"
            >
              <ChevronLeft className="h-5 w-5" />
              <span className="sr-only">Back to Dashboard</span>
            </Link>
            
            <div>
              <h1 className="text-xl font-bold truncate">{courseTitle}</h1>
              <p className="text-sm text-slate-500 dark:text-slate-400">{courseAcronym}</p>
            </div>
          </div>
          
          <div className="w-full md:w-64 space-y-1">
            <div className="flex justify-between text-sm">
              <span className="text-slate-500 dark:text-slate-400">Your progress</span>
              <span className="text-slate-700 dark:text-slate-300">{completedLessons}/{totalLessons} lessons</span>
            </div>
            <Progress value={progressPercentage} className="h-2" />
          </div>
        </div>
      </div>
    </div>
  );
}
```

### 6.13 Lesson Display Component

**File: `src/components/features/courses/LessonDisplay.tsx`**
```typescript
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { CheckCircle, X } from 'lucide-react';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useCourseProgress } from '@/hooks/useCourseProgress';
import { useToast } from '@/hooks/useToast';

interface LessonDisplayProps {
  lessonId: string;
  enrollmentId: string;
  title: string;
  content: string;
  isCompleted: boolean;
}

export default function LessonDisplay({
  lessonId,
  enrollmentId,
  title,
  content,
  isCompleted,
}: LessonDisplayProps) {
  const [isConfirmDialogOpen, setIsConfirmDialogOpen] = useState(false);
  const [isMarking, setIsMarking] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const { markLessonComplete } = useCourseProgress(enrollmentId);
  const { toast } = useToast();
  
  const handleMarkComplete = async () => {
    setIsMarking(true);
    setError(null);
    
    try {
      await markLessonComplete(lessonId);
      
      setIsConfirmDialogOpen(false);
      toast({
        title: "Lesson completed",
        description: "Your progress has been saved",
        variant: "success",
      });
    } catch (err) {
      console.error("Error marking lesson as complete:", err);
      setError("Failed to mark lesson as complete. Please try again.");
    } finally {
      setIsMarking(false);
    }
  };
  
  return (
    <div className="max-w-3xl mx-auto">
      <div className="mb-6">
        <h1 className="text-2xl md:text-3xl font-bold mb-4">{title}</h1>
        
        {!isCompleted && (
          <div className="flex justify-end mb-4">
            <Button 
              onClick={() => setIsConfirmDialogOpen(true)}
              className="flex items-center"
            >
              <CheckCircle className="mr-2 h-4 w-4" />
              Mark as Complete
            </Button>
          </div>
        )}
        
        {isCompleted && (
          <Alert className="mb-4 bg-green-50 dark:bg-green-950/30 border-green-200 dark:border-green-900">
            <CheckCircle className="h-4 w-4 text-green-600 dark:text-green-400" />
            <AlertDescription className="text-green-600 dark:text-green-400">
              You've completed this lesson
            </AlertDescription>
          </Alert>
        )}
      </div>
      
      <div 
        className="lesson-content prose dark:prose-invert prose-slate max-w-none"
        dangerouslySetInnerHTML={{ __html: content }}
      />
      
      {!isCompleted && (
        <div className="flex justify-center mt-12 mb-6">
          <Button 
            size="lg"
            onClick={() => setIsConfirmDialogOpen(true)}
            className="flex items-center"
          >
            <CheckCircle className="mr-2 h-5 w-5" />
            Mark as Complete
          </Button>
        </div>
      )}
      
      <Dialog open={isConfirmDialogOpen} onOpenChange={setIsConfirmDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Mark lesson as complete?</DialogTitle>
            <DialogDescription>
              This will mark this lesson as completed and update your course progress.
            </DialogDescription>
          </DialogHeader>
          
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsConfirmDialogOpen(false)}
              disabled={isMarking}
            >
              <X className="mr-2 h-4 w-4" />
              Cancel
            </Button>
            <Button
              onClick={handleMarkComplete}
              disabled={isMarking}
            >
              {isMarking ? "Marking..." : "Confirm"}
              {!isMarking && <CheckCircle className="ml-2 h-4 w-4" />}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}
```

### 6.14 Course Default View Page

**File: `src/app/(main)/courses/[courseId]/view/page.tsx`**
```typescript
import { auth } from "@/lib/auth";
import prisma from "@/lib/prisma";
import { redirect } from "next/navigation";

interface CourseViewPageProps {
  params: {
    courseId: string;
  };
}

export default async function CourseViewPage({ params }: CourseViewPageProps) {
  const { courseId } = params;
  
  // Check if the user is authenticated
  const session = await auth.getSession();
  if (!session?.user) {
    redirect("/login");
  }
  
  // Check if the user is enrolled in this course
  const enrollment = await prisma.enrollment.findFirst({
    where: {
      courseId,
      userId: session.user.id,
    },
    include: {
      lessonProgress: {
        select: {
          lessonId: true,
        },
      },
    },
  });
  
  if (!enrollment) {
    redirect("/courses");
  }
  
  // Get the first lesson of the course
  const firstModule = await prisma.module.findFirst({
    where: {
      courseId,
    },
    orderBy: {
      moduleNumber: 'asc',
    },
    include: {
      lessons: {
        orderBy: {
          lessonNumber: 'asc',
        },
        take: 1,
        select: {
          id: true,
        },
      },
    },
  });
  
  if (firstModule?.lessons[0]) {
    // Redirect to the first lesson
    redirect(`/courses/${courseId}/view/lesson/${firstModule.lessons[0].id}`);
  }
  
  // Fallback if no lessons exist (should not happen)
  return (
    <div className="flex flex-col items-center justify-center h-full">
      <h1 className="text-2xl font-bold mb-4">Course Content</h1>
      <p className="text-slate-500 dark:text-slate-400">
        This course does not have any lessons yet.
      </p>
    </div>
  );
}
```

### 6.15 Lesson View Page

**File: `src/app/(main)/courses/[courseId]/view/lesson/[lessonId]/page.tsx`**
```typescript
import { auth } from "@/lib/auth";
import prisma from "@/lib/prisma";
import { redirect } from "next/navigation";
import LessonDisplay from "@/components/features/courses/LessonDisplay";

interface LessonViewPageProps {
  params: {
    courseId: string;
    lessonId: string;
  };
}

export default async function LessonViewPage({ params }: LessonViewPageProps) {
  const { courseId, lessonId } = params;
  
  // Check if the user is authenticated
  const session = await auth.getSession();
  if (!session?.user) {
    redirect("/login");
  }
  
  // Get lesson and verify enrollment
  const lesson = await prisma.lesson.findUnique({
    where: {
      id: lessonId,
      courseId, // Ensure lesson belongs to the correct course
    },
    include: {
      course: {
        select: {
          enrollments: {
            where: {
              userId: session.user.id,
            },
            select: {
              id: true,
              lessonProgress: {
                where: {
                  lessonId,
                },
                select: {
                  id: true,
                  completedAt: true,
                },
              },
            },
          },
        },
      },
    },
  });
  
  // If lesson not found or not part of the course
  if (!lesson) {
    redirect(`/courses/${courseId}/view`);
  }
  
  // Check if user is enrolled in this course
  const enrollment = lesson.course.enrollments[0];
  if (!enrollment) {
    redirect("/courses");
  }
  
  // Check if lesson is already completed
  const isCompleted = enrollment.lessonProgress.length > 0;
  
  // Process the content (replace placeholders if needed)
  // This could be expanded for more advanced content processing
  const processedContent = lesson.content
    // Convert plain newlines to <br> for proper HTML rendering
    .replace(/\n/g, '<br>')
    // Process key concept boxes
    .replace(
      /\[KEY CONCEPT\](.*?)\[\/KEY CONCEPT\]/gs,
      '<div class="key-concept"><h4>Key Concept</h4>$1</div>'
    )
    // Process important note boxes
    .replace(
      /\[IMPORTANT\](.*?)\[\/IMPORTANT\]/gs,
      '<div class="important-note"><h4>Important</h4>$1</div>'
    )
    // Process practical example boxes
    .replace(
      /\[EXAMPLE\](.*?)\[\/EXAMPLE\]/gs,
      '<div class="practical-example"><h4>Practical Example</h4>$1</div>'
    );
  
  return (
    <LessonDisplay
      lessonId={lessonId}
      enrollmentId={enrollment.id}
      title={lesson.title}
      content={processedContent}
      isCompleted={isCompleted}
    />
  );
}
```

## 7. Toast Notification Hook

**File: `src/hooks/useToast.ts`**
```typescript
import { useToast as useToastBase } from '@/components/ui/use-toast';

type ToastVariant = 'default' | 'destructive' | 'success';

interface UseToastParams {
  title?: string;
  description?: string;
  variant?: ToastVariant;
  duration?: number;
}

export function useToast() {
  const { toast } = useToastBase();
  
  const showToast = ({
    title,
    description,
    variant = 'default',
    duration = 3000,
  }: UseToastParams) => {
    return toast({
      title,
      description,
      variant: variant === 'success' ? undefined : variant, // Handle success variant
      className: variant === 'success' ? 'bg-green-50 border-green-200 text-green-900 dark:bg-green-950 dark:border-green-900 dark:text-green-50' : undefined,
      duration,
    });
  };
  
  return {
    toast: showToast,
  };
}
```

## 8. Use Toast Component Integration

**File: `src/components/ui/use-toast.ts`**
```typescript
// This is a modified version of the shadcn/ui toast component

import { useState, useEffect, useCallback } from "react"

import type { ToastActionElement, ToastProps } from "@/components/ui/toast"

const TOAST_LIMIT = 10
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: string
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: string
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case actionTypes.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action

      if (toastId) {
        toastTimeouts.set(
          toastId,
          setTimeout(() => {
            toastTimeouts.delete(toastId)
            dispatch({
              type: actionTypes.REMOVE_TOAST,
              toastId,
            })
          }, TOAST_REMOVE_DELAY)
        )
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

interface Toast extends Omit<ToasterToast, "id"> {}

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: actionTypes.UPDATE_TOAST,
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: actionTypes.DISMISS_TOAST, toastId: id })

  dispatch({
    type: actionTypes.ADD_TOAST,
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = useState<State>(memoryState)

  useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: actionTypes.DISMISS_TOAST, toastId }),
  }
}

export { useToast, toast }
```

This completes the essential implementation plan for the NSBS platform with Better Auth integration. Each file has been meticulously designed to ensure production-readiness, secure authentication, proper data validation, responsive UI, and adherence to accessibility standards.

The implementation includes:
1. Complete authentication system using Better Auth
2. Course management with module/lesson hierarchy
3. Progress tracking system with proper user verification
4. Responsive UI components using shadcn/ui
5. API endpoints with comprehensive error handling and validation
6. React Query for client-side data fetching with proper caching

All components follow best practices for React, TypeScript, and Next.js App Router architecture, ensuring optimal performance and maintainability.​​​​​​​​​​​​​​​​